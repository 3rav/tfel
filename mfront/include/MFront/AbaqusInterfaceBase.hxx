/*!
 * \file   AbaqusInterfaceBase.hxx
 * \brief    
 * \author THOMAS HELFER
 * \date   17 mars 2016
 */

#ifndef LIB_MFRONT_ABAQUSINTERFACEBASE_HXX
#define LIB_MFRONT_ABAQUSINTERFACEBASE_HXX

#include<string>
#include<iosfwd>

#include"MFront/UMATInterfaceBase.hxx"

namespace mfront{

  /*!
   * \brief base class for the interfaces to:
   * - the Abaqus Standard finite element solver (see `AbaqusInterface`)
   * - the Abaqus Explicit finite element solver (see `AbaqusExplicitInterface`)
   */
  struct AbaqusInterfaceBase
    : public UMATInterfaceBase
  {
    //! destructor
    virtual ~AbaqusInterfaceBase();
  protected:
    /*!
     * \return the name of the generated library
     * \param[in] mb : behaviour description
     */
    virtual std::string
    getLibraryName(const BehaviourDescription&) const override;
    /*!
     * \brief write a  specialisation of the AbaqusTraits class
     * \param[in] out : ouptut file
     * \param[in] mb  : behaviour description
     * \param[in] h   : modelling hypothesis
     */
    virtual void
    writeAbaqusBehaviourTraits(std::ostream&,
			       const BehaviourDescription&,
			       const tfel::material::ModellingHypothesis::Hypothesis) const;
    /*!
     * \param[in] out  : output file
     * \param[in] name : name of the behaviour as defined by interface
     *                   (generally taking into account the material
     *                    and the behaviour name)
     * \param[in] h    : modelling hypothesis
     * \param[in] mb   : behaviour description
     * \param[in] fd   : file description
     */
    virtual void
    writeUMATxxAdditionalSymbols(std::ostream&,
				 const std::string&,
				 const Hypothesis,
				 const BehaviourDescription&,
				 const FileDescription&) const override;
    /*!
     * \param[in] out : output file
     */
    virtual void
    writeMTestFileGeneratorSetModellingHypothesis(std::ostream&) const override;

    virtual std::string
    getModellingHypothesisTest(const Hypothesis) const override;

    virtual std::map<UMATInterfaceBase::Hypothesis,std::string>
    gatherModellingHypothesesAndTests(const BehaviourDescription&) const override;
    /*!
     * \return a pair which first member gives the position of the
     * material properties in the values given through the interface
     * and whose second members is an offset giving the number of
     * imposed material properties.
     * \param[in] mb : behaviour description
     * \param[in] h  : modelling hypothesis
     */
    virtual std::pair<std::vector<UMATMaterialProperty>,
		      SupportedTypes::TypeSize>
    buildMaterialPropertiesList(const BehaviourDescription&,
				const Hypothesis) const override;
    /*!
     * \return the name of the function generated by the interface
     * \param[in] n : name of the behaviour as defined by interface
     *                (generally taking into account the material
     *                 and the behaviour name)
     */
    virtual std::string
    getFunctionName(const std::string&) const override;
    /*!
     * \return the list of modelling hypotheses treated by the interface
     * \param[in] mb : behaviour description
     */
    virtual std::set<tfel::material::ModellingHypothesis::Hypothesis>
    getModellingHypothesesToBeTreated(const BehaviourDescription&) const override;

    virtual void 
    writeInputFileExample(const BehaviourDescription&,
			  const FileDescription&) const;
    
    virtual void
    writeDepvar(std::ostream&,int&,
		const Hypothesis&,
		const VariableDescription&,
		const std::string&) const;
  }; // end of struct AbaqusInterfaceBase
  
} // end of namespace mfront

#endif /* LIB_MFRONT_ABAQUSINTERFACEBASE_HXX_ */
